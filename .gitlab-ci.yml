image: docker:latest
services:
  - docker:dind

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - if: '$CI_COMMIT_BRANCH == "develop" && $CI_PIPELINE_SOURCE == "push"'
      when: always
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"'
      when: always
    - when: never
stages:
  - build
  - package
  - deploy

build-gradle:
  image: gradle:8.7-jdk21-alpine
  stage: build
  script:
    - gradle clean bootJar -x test
  cache:
    key: "$CI_PROJECT_ID-gradle"
    paths:
      - .gradle
      - build
  artifacts:
    paths:
      - build/libs/*.jar

build-docker:
  stage: package
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

deploy-vps:
  stage: deploy
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - chmod 400 $VPS_PRIVATE_KEY
    - ssh-add $VPS_PRIVATE_KEY
  script:
    - ssh -o StrictHostKeyChecking=no "$VPS_USER@$VPS_HOST" "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - ssh -o StrictHostKeyChecking=no "$VPS_USER@$VPS_HOST" "docker rm -f $CI_PROJECT_NAME || true"
    - ssh -o StrictHostKeyChecking=no "$VPS_USER@$VPS_HOST" "docker rmi \$(docker images -q $CI_REGISTRY_IMAGE) || true"
    - ssh -o StrictHostKeyChecking=no "$VPS_USER@$VPS_HOST"
      docker run
      --name=$CI_PROJECT_NAME
      --restart=always
      --network trip-project
      -e SPRING_PROFILE=prod
      -p 8080:8080
      -d $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  when: manual