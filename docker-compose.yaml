version: '3.3'

services:
  elasticsearch:
    image: elasticsearch:7.14.0
    container_name: elasticsearch
    profiles:
      - full
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elk_data:/usr/share/elasticsearch/data/
      - ./elk/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      - discovery.type=single-node
      - http.host=0.0.0.0
      - transport.host=0.0.0.0
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
      - cluster.name=elasticsearch
      - bootstrap.memory_lock=true
  logstash:
    image: logstash:7.14.0
    container_name: logstash
    profiles:
      - full
    ports:
      - "5044:5044"
      - "9600:9600"
    volumes:
      - ./elk/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./elk/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ls_data:/usr/share/logstash/data
    depends_on:
      - elasticsearch
  kibana:
    image: kibana:7.14.0
    container_name: kibana
    profiles:
      - full
    ports:
      - "5601:5601"
    volumes:
      - ./elk/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
      - kb_data:/usr/share/kibana/data
    depends_on:
      - elasticsearch
  filebeat:
    image: elastic/filebeat:7.14.0
    container_name: filebeat
    profiles:
      - full
    user: root
    command: [ "filebeat", "-e", "--strict.perms=false" ]
    volumes:
      - ./elk/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs/:/var/logs/:ro
    depends_on:
      - logstash
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: postgres
    ports:
      - "5732:5432"
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    restart: always
  redis-commander:
    image: rediscommander/redis-commander:latest
    profiles:
      - dev
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    restart: always
  prometheus:
    image: prom/prometheus:v2.46.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./metrics-service/prometheus/tmp:/prometheus
      - ./metrics-service/prometheus:/etc/prometheus
    command: --config.file=/etc/prometheus/prometheus.yml --log.level=debug
  #    depends_on:
  #      - trip
  grafana:
    image: grafana/grafana:10.0.3
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./metrics-service/grafana/tmp:/var/lib/grafana
      - ./metrics-service/grafana/grafana.ini:/etc/grafana/grafana.ini
    depends_on:
      - prometheus
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./metrics-service/alert-manager/tmp:/data
      - ./metrics-service/alert-manager:/config
    command: --config.file=/config/alertmanager.yaml --log.level=debug
  #    depends_on:
  #      - trip
  kafka:
    image: confluentinc/cp-server:7.2.1
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9997:9997"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: kafka
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8082:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: true
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    depends_on:
      - kafka
    ports:
      - 8083:8083
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8083
  trip:
    build:
      context: trip
      dockerfile: trip/Dockerfile
    profiles:
      - fulll
    container_name: trip
    restart: always
    #    env_file:
    #      - .env.prod
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis

volumes:
  elk_data:
  ls_data:
  kb_data: